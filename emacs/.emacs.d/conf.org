* Identité
  #+BEGIN_SRC emacs-lisp
    (setq user-full-name "dbeley")
  #+END_SRC
  
* Paramètres basiques
** better-defaults
   #+BEGIN_SRC emacs-lisp
     (use-package better-defaults
       :ensure t)
   #+END_SRC
   
** Interface
   #+BEGIN_SRC emacs-lisp
     ;; Hide GUI elements
     (tool-bar-mode -1)
     (menu-bar-mode -1)
     (scroll-bar-mode -1)
     (fringe-mode 1)

     ;; Smooth scrolling
     (setq scroll-margin 5)
     (setq smooth-scroll-margin 1)
     (setq scroll-step 1)
     (setq scroll-conservatively 10000)
     (setq auto-window-vscroll nil)

     (global-prettify-symbols-mode +1)

     (add-hook 'emacs-lisp-mode-hook
               (lambda ()
                 (push '("<=" . ?≤) prettify-symbols-alist))) 

     (global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
     (global-set-key (kbd "S-C-<down>") 'shrink-window)
     (global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
     (global-set-key (kbd "S-C-<up>") 'enlarge-window)
     (global-set-key (kbd "S-C-h") 'shrink-window-horizontally)
     (global-set-key (kbd "S-C-j") 'shrink-window)
     (global-set-key (kbd "S-C-l") 'enlarge-window-horizontally)
     (global-set-key (kbd "S-C-k") 'enlarge-window)

     ;; Wrap line
     (global-visual-line-mode)
   #+END_SRC
   
** Navigation
   #+BEGIN_SRC emacs-lisp
     (when (fboundp 'windmove-default-keybindings)
       (windmove-default-keybindings))
     (add-hook 'org-shiftup-final-hook 'windmove-up)
     (add-hook 'org-shiftleft-final-hook 'windmove-left)
     (add-hook 'org-shiftdown-final-hook 'windmove-down)
     (add-hook 'org-shiftright-final-hook 'windmove-right)

   #+END_SRC
   
** Autres
   #+BEGIN_SRC emacs-lisp
     (require 'iso-transl)
     (setq locale-coding-system 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (set-selection-coding-system 'utf-8)
     (prefer-coding-system 'utf-8)

     (setq x-select-enable-clipboard t)

     (global-auto-revert-mode 1)
     (setq global-auto-revert-non-file-buffers t)
     (setq auto-revert-verbose nil)

     (setq echo-keystrokes 0.1)

     (global-font-lock-mode t)
     (set-face-attribute 'default nil
                         :family "Iosevka Nerd Font"
                         :weight 'normal
                         :width 'normal
                         :height 110
                         :slant 'italic
                         )

     (defalias 'yes-or-no-p 'y-or-n-p)

     (setq jump-char-lazy-highlight-face nil)

     ;; Deprecated
     ;;(global-linum-mode t)
     ;; Performances issues
     (global-display-line-numbers-mode)
     (setq display-line-numbers-type 'relative)

     (setq auto-hscroll-mode 'current-line)

     (setq fill-column 80)
     (set-default 'fill-column 80)

     ;; Always follow symlinks
     ;;(setq vc-follow-symlinks t)

     ;; Always allow colorschemes
     (setq-default custom-safe-themes t)

     ;; Open urls with xdg-open
     (setq browse-url-browser-function 'browse-url-xdg-open)
   #+END_SRC 
 
* Plug-ins
** Nettoyage
   #+BEGIN_SRC emacs-lisp
     (use-package no-littering
       :ensure t
       :config
       (require 'recentf)
       (add-to-list 'recentf-exclude no-littering-var-directory)
       (add-to-list 'recentf-exclude no-littering-etc-directory)
       )
   #+END_SRC
** Navigation
*** Evil-mode 
    #+BEGIN_SRC emacs-lisp
      (setq evil-want-C-i-jump nil)
      (setq evil-want-C-u-scroll t)

      (use-package evil
        :ensure t
        :init
        (setq evil-want-integration nil)
        :config
        (evil-mode 1)
        )

      (use-package evil-leader
        :ensure t
        :config
        (global-evil-leader-mode)
        (evil-leader/set-key
          "e" 'helm-find-files
          "b" 'helm-mini
          "k" 'kill-buffer
          "t" 'treemacs
          "r" 'ranger)
        )

      (use-package evil-surround
        :ensure t
        :config
        (global-evil-surround-mode))

      (use-package evil-collection
        :after evil
        :ensure t
        :config
        (evil-collection-init)
        (setq evil-collection-setup-minibuffer t)
        )

    #+END_SRC   
    
*** ranger
    #+BEGIN_SRC emacs-lisp
      (use-package ranger
        :ensure t
        :config
        (ranger-override-dired-mode t)
        (global-set-key (kbd "C-c r") #'ranger)
        (setq ranger-preview-file t)
        )
    #+END_SRC   
   
*** ace-window
    #+BEGIN_SRC emacs-lisp
      (use-package ace-window
        :ensure t
        :config
        (global-set-key (kbd "M-o") 'ace-window)
        (setq aw-dispatch-always t)
        (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
        )
    #+END_SRC
    
*** treemacs
    #+BEGIN_SRC emacs-lisp
      (use-package treemacs
        :ensure t
        :defer t
        :config
        (progn
          (setq treemacs-width 25
                treemacs-show-hidden-files t
                )
          (treemacs-follow-mode t)
          (treemacs-filewatch-mode t)
          )
        (add-hook 'after-init-hook #'treemacs)
        :bind
        (:map global-map
              ("M-0"        . treemacs-select-window)
              ("C-c 1"      . treemacs-delete-other-windows)
              ("C-c t"     . treemacs)
              ("C-c g"     . treemacs-bookmark)
              ("C-c f"  . treemacs-find-file)
              )
        )

      (use-package treemacs-evil
        :after treemacs
        :ensure t)

      (use-package treemacs-projectile
        :after treemacs
        :ensure t)
    #+END_SRC
    
*** dumb-jump
    #+BEGIN_SRC emacs-lisp
      (use-package dumb-jump
        :bind (("M-g o" . dumb-jump-go-other-window)
               ("M-g j" . dumb-jump-go)
               ("M-g i" . dumb-jump-go-prompt)
               ("M-g x" . dumb-jump-go-prefer-external)
               ("M-g z" . dumb-jump-go-prefer-external-other-window))
        :config (setq dumb-jump-selector 'helm)
        :ensure t
        )
    #+END_SRC
  
*** minimap
    #+BEGIN_SRC emacs-lisp
      ;;(use-package minimap
      ;;:ensure t
      ;;:config
      ;;(add-to-list 'minimap-major-modes 'org-mode)
      ;;(setq minimap-highlight-line nil)
      ;;(setq minimap-window-location 'right)
      ;;(setq minimap-recreate-window t)
      ;;(minimap-mode t)
      ;;)
    #+END_SRC
    
*** sublimity
    #+BEGIN_SRC emacs-lisp
      ;;(use-package sublimity
      ;;:ensure t
      ;;:config 
      ;;(require 'sublimity)
      ;;;;(require 'sublimity-scroll)
      ;;(require 'sublimity-map)
      ;;(sublimity-mode 1)
      ;;(sublimity-map-set-delay nil)
      ;;)
    #+END_SRC    
  
*** undo-tree
    #+BEGIN_SRC emacs-lisp
      ;;(use-package undo-tree
      ;;:ensure t
      ;;:config
      ;;(global-undo-tree-mode)
      ;;;; make ctrl-z undo
      ;;(global-set-key (kbd "C-z") 'undo)
      ;;;; make ctrl-Z redo
      ;;(defalias 'redo 'undo-tree-redo)
      ;;(global-set-key (kbd "C-S-z") 'redo)
      ;;)
    #+END_SRC
    
*** perspective-el
    #+BEGIN_SRC emacs-lisp
      ;; Conflit avec company-mode
      ;;(use-package perspective
      ;;:ensure t
      ;;:config
      ;;(persp-mode)
      ;;)
    #+END_SRC

***  eyebrowse
    #+BEGIN_SRC emacs-lisp
      ;;(use-package eyebrowse
      ;;:ensure t
      ;;:config
      ;;(eyebrowse-mode t)
      ;;)
    #+END_SRC
   
*** fzf
    #+BEGIN_SRC emacs-lisp
      (use-package fzf
        :ensure t
        :config
        (global-set-key (kbd "C-c z") 'fzf)
        )
    #+END_SRC
** Apparence
*** rainbow-mode
    #+BEGIN_SRC emacs-lisp
      (use-package rainbow-mode
        :ensure t
        :config
        (rainbow-mode)
        )
    #+END_SRC

*** base16-theme
    #+BEGIN_SRC emacs-lisp
      ;;(use-package base16-theme
      ;;:ensure t
      ;;)          
    #+END_SRC

*** xresources-theme
    #+BEGIN_SRC emacs-lisp
      (use-package xresources-theme
        :ensure t
        :config
        ;;(let ((line (face-attribute 'mode-line :underline)))
        ;;(set-face-attribute 'mode-line          nil :overline   line)
        ;;(set-face-attribute 'mode-line-inactive nil :overline   line)
        ;;(set-face-attribute 'mode-line-inactive nil :underline  line)
        ;;(set-face-attribute 'mode-line          nil :box        nil)
        ;;(set-face-attribute 'mode-line-inactive nil :box        nil))
        )
      ;;        (set-face-attribute 'mode-line-inactive nil :background "#f9f2d9")))
    #+END_SRC
    
*** Chargement des thèmes
    #+BEGIN_SRC emacs-lisp
      ;;(load-theme 'base16-gruvbox-dark-hard t)
      ;;(load-theme 'airline-ubaryd)

      (defun my-frame-tweaks (&optional frame)
        "My personal frame tweaks."
        (unless frame
          (setq frame (selected-frame)))
        (when frame
          (with-selected-frame frame
            (when (display-graphic-p)
              (load-theme 'xresources t)))))
      ;; For the case that the init file runs after the frame has been created.
      ;; Call of emacs without --daemon option.
      ;;(my-frame-tweaks) 
      ;; For the case that the init file runs before the frame is created.
      ;; Call of emacs with --daemon option.
      (add-hook 'after-make-frame-functions #'my-frame-tweaks t)    
    #+END_SRC
    
*** Spaceline
    #+BEGIN_SRC emacs-lisp
      (use-package spaceline
        :ensure t
        :config
        (spaceline-spacemacs-theme)
        (spaceline-emacs-theme)
        (setq powerline-default-separator 'slant)
        ;;(setq powerline-default-separator 'wave)
        ;; choix : alternate, arrow, arrow-fade, bar, box, brace,
        ;; butt, chamfer, contour, curve, rounded, roundstub, slant, wave, zigzag,
        ;; utf-8.
        (setq spaceline-workspace-numbers-unicode t)
        (setq spaceline-window-numbers-unicode t)
        ;;(spaceline-toggle-workspace-number-off)
        (spaceline-helm-mode 1)
        (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
        (spaceline-compile)
        )

      (use-package all-the-icons
        :ensure t
        )

      (use-package spaceline-all-the-icons
        :ensure t
        :after spaceline
        :config (spaceline-all-the-icons-theme)
        (setq spaceline-all-the-icons-flycheck-alternate t)
        (setq spaceline-all-the-icons-separator-type 'arrow)
        ;; slant arrow cup wave none
        (setq spaceline-all-the-icons-separators-invert-direction t)
        (setq spaceline-all-the-icons-primary-separator "")
        (setq spaceline-all-the-icons-secondary-separator "")
        (setq powerline-text-scale-factor 1.1)
        (spaceline-toggle-all-the-icons-buffer-position-on)
        )
    #+END_SRC

*** moody
    #+BEGIN_SRC emacs-lisp
      ;;(use-package moody
      ;;:ensure t
      ;;:config
      ;;(setq x-underline-at-descent-line t)
      ;;(moody-replace-mode-line-buffer-identification)
      ;;(moody-replace-vc-mode))
    #+END_SRC
    
*** page-break-lines
    #+BEGIN_SRC emacs-lisp
      (use-package page-break-lines
        :ensure t
        :config 
        ;;(turn-on-page-break-lines-mode)
        (global-page-break-lines-mode)
        )
    #+END_SRC
    
*** dashboard
    #+BEGIN_SRC emacs-lisp
      (use-package dashboard
        :ensure t
        :config (dashboard-setup-startup-hook)
        (setq dashboard-banner-logo-title "Bienvenue dans Emacs")
        (setq dashboard-items '((recents . 5)
                                (bookmarks . 5)
                                (projects . 5)
                                (agenda . 5)
                                (registers . 5)))
        )
    #+END_SRC

*** eshell-git-prompt
    #+BEGIN_SRC emacs-lisp
      (use-package eshell-git-prompt
        :ensure t
        :config
        (eshell-git-prompt-use-theme 'powerline)
        )

    #+END_SRC
** Recherche, complétion, Syntaxe, …
*** swiper
    #+BEGIN_SRC emacs-lisp
      ;;(use-package ivy
      ;;  :ensure t
      ;;  :config
      ;;  (ivy-mode 1)
      ;;  (setq ivy-display-style 'fancy)
      ;;  (setq ivy-use-virtual-buffers t)
      ;;  (setq enable-recursive-minibuffers t)
      ;;  (global-set-key "\C-s" 'swiper)
      ;;  (global-set-key (kbd "C-c C-r") 'ivy-resume)
      ;;  (global-set-key (kbd "<f6>") 'ivy-resume)
      ;;  (global-set-key (kbd "M-x") 'counsel-M-x)
      ;;  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      ;;  (global-set-key (kbd "C-x f") 'counsel-recentf)
      ;;  (global-set-key (kbd "C-x C-b") 'counsel-ibuffer)
      ;;  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      ;;  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      ;;  (global-set-key (kbd "<f1> l") 'counsel-find-library)
      ;;  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      ;;  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      ;;  (global-set-key (kbd "C-c g") 'counsel-git)
      ;;  (global-set-key (kbd "C-c j") 'counsel-git-grep)
      ;;  (global-set-key (kbd "C-c k") 'counsel-ag)
      ;;  (global-set-key (kbd "C-x l") 'counsel-locate)
      ;;  (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      ;;  (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ;;  )
      ;;
      ;;(use-package ivy-rich
      ;;  :ensure t
      ;;  :config
      ;;  :custom
      ;;  (ivy-virtual-abbreviate 'full
      ;;  ivy-rich-switch-buffer-align-virtual-buffer t
      ;;  ivy-rich-path-style 'abbrev)
      ;;  :config
      ;;  (ivy-set-display-transformer 'ivy-switch-buffer
      ;;  'ivy-rich-switch-buffer-transformer))

      ;;(use-package counsel
      ;;  :ensure t
      ;;  )

      ;;(use-package swiper
      ;;  :ensure t
      ;;  )
      ;;
      ;;(use-package all-the-icons-ivy
      ;;  :ensure t
      ;;  :config
      ;;  (all-the-icons-ivy-setup))

    #+END_SRC
    
*** avy
    #+BEGIN_SRC emacs-lisp
      (use-package avy
        :ensure t
        :config (avy-setup-default)
        (global-set-key (kbd "C-;") 'avy-goto-line)
        (global-set-key (kbd "M-s") 'avy-goto-char)
        (global-set-key (kbd "M-e") 'avy-goto-word-or-subword-0)
        (global-set-key (kbd "C-c j") 'avy-goto-word-or-subword-0)
        )
    #+END_SRC
    
*** Helm
    #+BEGIN_SRC emacs-lisp
      (use-package helm
        :ensure t
        :config (helm-mode 1)
        (setq helm-mini-default-sources '(helm-source-buffers-list
                                          helm-source-recentf
                                          helm-source-bookmarks
                                          helm-source-buffer-not-found)
              ;;helm-always-two-windows t
              helm-split-window-inside-p t
              )
        (global-set-key (kbd "M-x") #'helm-M-x)
        (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
        (global-set-key (kbd "C-x C-f") #'helm-find-files)
        (global-set-key (kbd "C-x f") #'helm-recentf)
        (global-set-key (kbd "C-x C-b") #'helm-mini)
        (global-set-key (kbd "C-x b") #'helm-mini)
        )
    #+END_SRC

*** Yasnippet
    #+BEGIN_SRC emacs-lisp
      (use-package yasnippet
        :ensure t
        :config (yas-global-mode)
        )

      (use-package yasnippet-snippets
        :ensure t
        :after yasnippet
        :config (yasnippet-snippets-initialize)
        )
    #+END_SRC
    
*** Company-mode
    #+BEGIN_SRC emacs-lisp
      (use-package company
        :ensure t
        :config
        '(define-key company-active-map (kbd "C-c h") #'company-quickhelp-manual-begin)
        (setq company-begin-commands '(self-insert-command))
        (setq company-idle-delay 0)
        (setq company-minimum-prefix-length 2)
        (setq company-show-numbers t)
        (setq company-tooltip-align-annotations 't)
        (global-company-mode t)
        )

      (use-package company-quickhelp
        :ensure t
        :config
        (company-quickhelp-mode)
        )
    #+END_SRC
    
*** Company-box
    #+BEGIN_SRC emacs-lisp
      ;;rendering problem
      (use-package company-box
        :ensure t
        :after company
        :hook (company-mode . company-box-mode)
        )
    #+END_SRC

*** Company-anaconda
    #+BEGIN_SRC emacs-lisp
      ;;(use-package company-anaconda
      ;;:after (anaconda-mode company)
      ;;:config (add-to-list 'company-backends 'company-anaconda))
    #+END_SRC

*** company-shell
    #+BEGIN_SRC emacs-lisp
      (use-package company-shell
        :ensure t
        :config
        (add-to-list 'company-backends '(company-shell company-shell-env company-fish-shell)
                     )
        )

    #+END_SRC

*** smartparens
    #+BEGIN_SRC emacs-lisp
      (use-package smartparens
        :ensure t
        :config
        (require 'smartparens-config)
        (smartparens-global-mode t)
        (show-smartparens-global-mode t)
        )

    #+END_SRC

*** Flycheck
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck
        :ensure t
        :config
        (add-hook 'after-init-hook 'global-flycheck-mode)
        )
    #+END_SRC
    
** Projets
*** Magit
    #+BEGIN_SRC emacs-lisp
      (use-package magit
        :ensure t
        :config
        (progn
          (bind-key "C-x g" 'magit-status)
          ))
    #+END_SRC
    
*** evil-magit
    #+BEGIN_SRC emacs-lisp
      (use-package evil-magit
        :ensure t
        )
    #+END_SRC
    
*** projectile
    #+BEGIN_SRC emacs-lisp
      (use-package projectile
        :ensure t
        :config (projectile-mode t)
        )
    #+END_SRC
    
*** helm-projectile
    #+BEGIN_SRC emacs-lisp
      (use-package helm-projectile
        :ensure t
        :config (helm-projectile-on)
        )
    #+END_SRC
   
*** counsel-projectile
    #+BEGIN_SRC emacs-lisp
      ;;(use-package counsel-projectile
      ;;:ensure t
      ;;:config
      ;;(counsel-projectile-mode)
      ;;)
    #+END_SRC
    
** Org-mode
*** Org-mode
    #+BEGIN_SRC emacs-lisp
      (use-package org
        :ensure org-plus-contrib
        :config
        (setq org-agenda-files '("~/Nextcloud/6. org/"))
        (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
        (global-set-key "\C-cl" 'org-store-link)
        (global-set-key "\C-ca" 'org-agenda)
        (global-set-key "\C-cb" 'org-iswitchb)
        (setq org-replace-disputed-keys t)
        (setq org-src-fontify-natively t)
        (setq org-src-tab-acts-natively t)
        (setq org-log-done t)
        (setq org-confirm-babel-evaluate nil)
        (setq org-startup-with-inline-images t)
        (org-babel-do-load-languages
         'org-babel-load-languages
         '((python . t)
           (emacs-lisp . t)
           (R . t)
           (org . t)
           ))
        )
    #+END_SRC
    
*** Evil-org
    #+BEGIN_SRC emacs-lisp
      (use-package evil-org
        :ensure t
        :after org
        :config
        (add-hook 'org-mode-hook 'evil-org-mode)
        (add-hook 'evil-org-mode-hook
                  (lambda ()
                    (evil-org-set-key-theme)))
        (require 'evil-org-agenda)
        (evil-org-agenda-set-keys))
    #+END_SRC
    
*** org-bullets
    #+BEGIN_SRC emacs-lisp
      (use-package org-bullets
        :ensure t
        :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
        (setq org-ellipsis "…")
        ;; ▼ ↴ ⬎ ⤷ ⋱ … ⤵ ▸
        (setq org-bullets-bullet-list '("○" "●" "◆" "◇" "▶" ))
        ) 
      ;; Choix
      ;; ◉ ○ ✸ ✿
      ;; ♥ ● ◇ ✚ ✜ ☯ ◆ ♠ ♣ ♦ ☢ ❀ ◆ ◖ ▶
      ;; ► • ★ ▸
    #+END_SRC
    
*** Exports
**** Twitter Bootstrap
     #+BEGIN_SRC emacs-lisp
       (use-package ox-twbs
         :ensure t
         )
     #+END_SRC
     
**** org-reveal
     #+BEGIN_SRC emacs-lisp
       (use-package ox-reveal
         :ensure t
         :config
         (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js@3.6.0/")
         (setq org-reveal-mathjax t)
         )

       (use-package htmlize
         :ensure t
         )
     #+END_SRC
     
*** org-capture
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-c c")
                      'org-capture)

      (setq org-capture-templates
            '(("a" "Album à écouter" entry (file+headline "~/Nextcloud/6. org/Culture/Musique.org" "Albums à écouter")
               "* %?\n%^g\n%T" :prepend t)
              ("t" "À faire" entry (file+headline "~/Nextcloud/6. org/Listes/TODO.org" "À Faire")
               "* %?\n%T\n" :prepend t)
              ("p" "Idée programmation" entry (file+headline "~/Nextcloud/6. org/Listes/Idées programmation.org" "Idées programmation")
               "* %?\n%T\n" :prepend t)
              ("s" "Série à regarder" entry (file+headline "~/Nextcloud/6. org/Culture/Séries.org" "Séries à regarder")
               "* %?\n%T\n" :prepend t)
              ("f" "Film à regarder" entry (file+headline "~/Nextcloud/6. org/Culture/Films.org" "Films à regarder")
               "* %?\n%T\n" :prepend t)
              ))
    #+END_SRC

*** org-brain
    #+BEGIN_SRC emacs-lisp
      (use-package org-brain
        :ensure t
        :init
        (setq org-brain-path "/home/david/Nextcloud/6. org/org-brain/")
        ;; For Evil users
        (with-eval-after-load 'evil
          (evil-set-initial-state 'org-brain-visualize-mode 'emacs))
        :config
        (setq org-id-track-globally t)
        (setq org-id-locations-file "~/.emacs.d/.org-id-locations")
        (push '("b" "Brain" plain (function org-brain-goto-end)
                "* %i%?" :empty-lines 1)
              org-capture-templates)
        (setq org-brain-visualize-default-choices 'all)
        (setq org-brain-title-max-length 12))
    #+END_SRC

** Latex
*** auctex
    #+BEGIN_SRC emacs-lisp
      (use-package latex 
        :ensure auctex
        )

      (load "auctex.el" nil t t)

      ;;(load "preview-latex.el" nil t t)

      (setq TeX-auto-save t
            TeX-parse-self t)

      (use-package magic-latex-buffer
        :ensure t
        :config
        (add-hook 'latex-mode-hook 'magic-latex-buffer)
        )

    #+END_SRC
    
** Langages
*** elpy
    #+BEGIN_SRC emacs-lisp
      (use-package elpy
        :ensure t
        :config (elpy-enable)
        (setq python-shell-interpreter "jupyter"
              python-shell-interpreter-args "console --simple-prompt"
              python-shell-prompt-detect-failure-warning nil)
        (add-to-list 'python-shell-completion-native-disabled-interpreters
                     "jupyter")
        )
    #+END_SRC
    
***  anaconda-mode
    #+BEGIN_SRC emacs-lisp
      ;;(use-package anaconda-mode
      ;;:ensure t
      ;;:config
      ;;(add-hook 'python-mode-hook 'anaconda-mode))
    #+END_SRC
    
*** web-mode
    #+BEGIN_SRC emacs-lisp
      (use-package web-mode
        :ensure t
        :config
        (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
        )
    #+END_SRC
   
***  clojure
    #+BEGIN_SRC emacs-lisp
      ;;(use-package clojure-mode
      ;;:ensure t)
      ;;
      ;;(use-package cider
      ;;:ensure t)

    #+END_SRC
*** markdown
    #+BEGIN_SRC emacs-lisp
      (use-package markdown-mode
        :ensure t
        :commands (markdown-mode gfm-mode)
        :mode (("README\\.md\\'" . gfm-mode)
               ("\\.md\\'" . markdown-mode)
               ("\\.markdown\\'" . markdown-mode))
        :init (setq markdown-command "markdown"))

    #+END_SRC
** Documentation
*** Helpful
    #+BEGIN_SRC emacs-lisp
      (use-package helpful
        :ensure t
        :config
        (global-set-key (kbd "C-h f") #'helpful-callable)

        (global-set-key (kbd "C-h v") #'helpful-variable)
        (global-set-key (kbd "C-h k") #'helpful-key)

        ;; Lookup the current symbol at point. C-c C-d is a common keybinding
        ;; for this in lisp modes.
        (global-set-key (kbd "C-c C-d") #'helpful-at-point)

        (global-set-key (kbd "C-h F") #'helpful-function)
        (global-set-key (kbd "C-h C") #'helpful-command)
        )
    #+END_SRC
** Autres
*** ess
    #+BEGIN_SRC emacs-lisp
      (use-package ess
        :ensure t)
    #+END_SRC

*** exwm
    #+BEGIN_SRC emacs-lisp
      ;;(use-package exwm
      ;;    :ensure t
      ;;    :config
      ;;    (require 'exwm)
      ;;    (require 'exwm-config)
      ;;    (exwm-config-default)
      ;;    (require 'exwm-systemtray)
      ;;    (exwm-systemtray-enable)
      ;;    (display-time-mode 1)
      ;;    (display-battery-mode 1)
      ;;    (exwm-input-set-key (kbd "<XF86MonBrightnessDown>") (lambda () (interactive) (shell-command "light -U 5%")))
      ;;    (exwm-input-set-key (kbd "<XF86MonBrightnessUp>") (lambda () (interactive) (shell-command "light -A 5%")))
      ;;    
      ;;    (exwm-input-set-key (kbd "<Print>") (lambda () (interactive) (shell-command "maim ~/Nextcloud/Images/Captures\ d\'écran\$(date +%s).png")))
      ;;    (exwm-input-set-key (kbd "<Pause>") (lambda () (interactive) (shell-command "wal -i $HOME/Nextcloud/Wallpapers/wal")))
      ;;    
      ;;    (exwm-input-set-key (kbd "<XF86AudioRaiseVolume>") (lambda () (interactive) (shell-command "amixer -q sset Master 1%+")))
      ;;    (exwm-input-set-key (kbd "<XF86AudioLowerVolume>") (lambda () (interactive) (shell-command "amixer -q sset Master 1%-")))
      ;;    (exwm-input-set-key (kbd "<XF86AudioMute>") (lambda () (interactive) (shell-command "amixer -q sset Master toggle")))
      ;;    (exwm-input-set-key (kbd "<XF86AudioPlay>") (lambda () (interactive) (shell-command "mpc toggle")))
      ;;    (exwm-input-set-key (kbd "<XF86AudioPause>") (lambda () (interactive) (shell-command "mpc toggle")))
      ;;    (exwm-input-set-key (kbd "<XF86AudioNext>") (lambda () (interactive) (shell-command "mpc next")))
      ;;    (exwm-input-set-key (kbd "<XF86AudioPrev>") (lambda () (interactive) (shell-command "mpc prev")))
      ;;    )
    #+END_SRC
    
*** eww
    #+BEGIN_SRC emacs-lisp
      (use-package eww
        :ensure t
        )
    #+END_SRC
    
*** simple-mpc
    #+BEGIN_SRC emacs-lisp
      (use-package simple-mpc
        :ensure t
        :config
        (add-to-list 'evil-emacs-state-modes 'simple-mpc-mode)
        )

    #+END_SRC
    
*** which-key
    #+BEGIN_SRC emacs-lisp
      (use-package which-key
        :ensure t
        :config
        (which-key-mode)
        )
    #+END_SRC
    
*** engine-mode
    #+BEGIN_SRC emacs-lisp
      ;;(use-package engine-mode
      ;;:ensure t
      ;;:config
      ;;(engine-mode t)
      ;;)
    #+END_SRC
    
*** elfeed
    #+BEGIN_SRC emacs-lisp
      (use-package elfeed
        :ensure t
        :config
        (global-set-key (kbd "C-x w") 'elfeed)
        (setf url-queue-timeout 1)
        )

      (use-package elfeed-org
        :ensure t
        :config
        (elfeed-org)
        (setq rmh-elfeed-org-files (list "~/Nextcloud/6. org/Listes/rss.org"))
        )

      (use-package elfeed-goodies
        :ensure t
        :config
        (elfeed-goodies/setup)
        )
    #+END_SRC
*** circe (ou erc)
    #+BEGIN_SRC emacs-lisp
      (use-package circe
        :ensure t
        )
    #+END_SRC
    
*** pdf-tools
    #+BEGIN_SRC emacs-lisp
      (use-package pdf-tools
        :ensure t
        :config
        (pdf-tools-install)
        )
    #+END_SRC

*** symon
    #+BEGIN_SRC emacs-lisp
      (use-package symon
        :ensure t
        :config
        (setq symon-refresh-rate 4)
        (setq symon-sparkline-type 'boxed)
        (symon-mode)
        )
    #+END_SRC

*** twittering-mode
    #+BEGIN_SRC emacs-lisp
      ;;(use-package twittering-mode
      ;;:ensure t
      ;;:config
      ;;(setq twittering-icon-mode t)
      ;;(global-set-key (kbd "C-c w") #'twittering-mode)
      ;;)
    #+END_SRC
    
*** md4rd
    #+BEGIN_SRC emacs-lisp
      (use-package md4rd
        :ensure t
        )
    #+END_SRC
    
*** mu4e
    #+BEGIN_SRC emacs-lisp
      ;;(use-package mu4e
      ;;:ensure t
      ;;)
    #+END_SRC

* Fonctions
** elfeed-play-with-mpv
   #+BEGIN_SRC emacs-lisp
     (setq elfeed-db-directory (expand-file-name "elfeed" user-emacs-directory))

     (defun ambrevar/elfeed-play-with-mpv ()
       "Play entry link with mpv."
       ((insert )nteractive)
       (let ((entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single)))
             (quality-arg "")
             (quality-val "720"))
         (setq quality-val (string-to-number quality-val))
         (message "Opening %s with height≤%s with mpv..." (elfeed-entry-link entry) quality-val)
         (when (< 0 quality-val)
           (setq quality-arg (format "--ytdl-format=[height<=?%s]" quality-val)))
         (start-process "elfeed-mpv" nil "mpv" quality-arg (elfeed-entry-link entry))))

     (defun ambrevar/elfeed-open-with-eww ()
       "Open in eww with `eww-readable'."
       ((insert )nteractive)
       (let ((entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single))))
         (eww  (elfeed-entry-link entry))
         (add-hook 'eww-after-render-hook 'eww-readable nil t)))

     (defvar ambrevar/elfeed-visit-patterns
       '(("youtu\\.?be" . ambrevar/elfeed-play-with-mpv)
         ("phoronix" . ambrevar/elfeed-open-with-eww))
       "List of (regexps . function) to match against elfeed entry link to know
     whether how to visit the link.")

     (defun ambrevar/elfeed-visit-maybe-external ()
       "Visit with external function if entry link matches `ambrevar/elfeed-visit-patterns',
     visit otherwise."
       ((insert )nteractive)
       (let ((entry (if (eq major-mode 'elfeed-show-mode)
                        elfeed-show-entry
                      (elfeed-(setq )earch-selected :single)))
             (patterns ambrevar/elfeed-visit-patterns))
         (while (and patterns (not (string-match (caar patterns) (elfeed-entry-link entry))))
           (setq patterns (cdr patterns)))
         (cond
          (patterns
           (funcall (cdar patterns)))
          ((eq major-mode 'elfeed-search-mode)
                                             ;      (call-interactively 'elfeed-search-show-entry))
           (call-interactively 'elfeed-search-browse-url))
          (t (elfeed-show-visit)))))

     (evil-define-key 'normal elfeed-search-mode-map (kbd "<S-return>") #'ambrevar/elfeed-visit-maybe-external)
   #+END_SRC
* Personnalisation
** custom-set-faces
   #+BEGIN_SRC emacs-lisp
     (custom-set-faces
      '(eshell-git-prompt-powerline-dir-face ((t (:background "gray18"))))
      '(helm-M-x-key ((t (:foreground "white" :underline t))))
      '(helm-match ((t (:foreground "white"))))
      '(hl-line ((t (:background "gray30"))))
      ;;'(minimap-active-region-background ((((background dark)) (:background "#2A2A2A222222")) (t (:background "#D3D3D3222222"))) nil :group)
      '(spaceline-evil-normal ((t (:background "dim grey" :foreground "black"))))
      '(spaceline-evil-insert ((t (:background "dark slate grey" :foreground "black"))))
      '(spaceline-evil-visual ((t (:background "indian red" :foreground "black"))))
      '(spaceline-evil-replace ((t (:background "dark gray" :foreground "black"))))
      ;;'(spaceline-highlight-face ((t (:background "dark gray" :foreground "#3E3D31" :inherit 'mode-line))))
      )

   #+END_SRC
   
