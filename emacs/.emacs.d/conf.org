#+TITLE: Emacs
* Paramètres basiques
  #+BEGIN_SRC emacs-lisp
    (setq user-full-name "dbeley")
    ;; Hide GUI elements
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (fringe-mode 1)

    ;; Font settings
    (global-font-lock-mode t)
    (set-face-attribute 'default nil
                        :family "Iosevka Nerd Font"
                        :weight 'normal
                        :width 'normal
                        :height 110
                        :slant 'italic
                        )

    ;; Margins
    (setq-default left-margin-width 2 right-margin-width 2)
    (set-window-buffer nil (current-buffer))

    ;; Smooth scrolling
    (setq scroll-margin 5)
    (setq smooth-scroll-margin 1)
    (setq scroll-step 1)
    (setq scroll-conservatively 10000)
    (setq auto-window-vscroll nil)

    (global-prettify-symbols-mode +1)

    (add-hook 'emacs-lisp-mode-hook
              (lambda ()
                (push '("<=" . ?≤) prettify-symbols-alist)
                (push '(">=" . ?≥) prettify-symbols-alist)
                (push '("!=" . ?≠) prettify-symbols-alist)
                ))

    ;; Wrap line
    (global-visual-line-mode)

    (require 'iso-transl)
    (setq locale-coding-system 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (set-selection-coding-system 'utf-8)
    (prefer-coding-system 'utf-8)

    (setq x-select-enable-clipboard t)

    (global-auto-revert-mode 1)
    (setq global-auto-revert-non-file-buffers t)
    (setq auto-revert-verbose nil)

    (setq echo-keystrokes 0.1)

    (defalias 'yes-or-no-p 'y-or-n-p)

    (setq jump-char-lazy-highlight-face nil)

    ;; Deprecated
    ;;(global-linum-mode t)
    ;; Performances issues
    (global-display-line-numbers-mode)
    (setq display-line-numbers-type 'relative)

    (setq auto-hscroll-mode 'current-line)

    (setq fill-column 80)
    (set-default 'fill-column 80)

    ;; Always follow symlinks
    ;;(setq vc-follow-symlinks t)

    ;; Always allow colorschemes
    (setq-default custom-safe-themes t)

    ;; Open urls with xdg-open
    (setq browse-url-browser-function 'browse-url-xdg-open)

    (setq load-prefer-newer t)

    (setq tramp-default-method "ssh")

    (setq-default explicit-shell-file-name "/bin/bash")

  #+END_SRC
  
* Plug-ins
** better-defaults
   #+BEGIN_SRC emacs-lisp
     (use-package better-defaults
       :ensure t)
   #+END_SRC
   
** Nettoyage
   #+BEGIN_SRC emacs-lisp
     (use-package no-littering
       :ensure t
       :config
       (require 'recentf)
       (add-to-list 'recentf-exclude no-littering-var-directory)
       (add-to-list 'recentf-exclude no-littering-etc-directory)
       (setq auto-save-file-name-transforms
             `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
       )
   #+END_SRC
   
** Navigation
*** Evil-mode 
    #+BEGIN_SRC emacs-lisp
      (setq evil-want-C-i-jump nil)
      (setq evil-want-C-u-scroll t)
      (setq evil-want-integration t)
      (setq evil-want-keybinding nil)

      (use-package evil
        :ensure t
        :init
        :config
        (evil-mode 1)
        )

      (use-package evil-leader
        :ensure t
        :config
        (global-evil-leader-mode)
        (evil-leader/set-key
          "e" 'helm-find-files
          "b" 'helm-mini
          "c" 'eyebrowse-close-window-config
          "d" 'dired
          "k" 'kill-buffer
          "m" 'simple-mpc
          "p" 'simple-mpc-toggle
          ;; "r" 'ranger
          "s" 'eyebrowse-switch-to-window-config
          "t" 'treemacs
          "w" 'elfeed
          "1" 'eyebrowse-switch-to-window-config-1
          "2" 'eyebrowse-switch-to-window-config-2
          "3" 'eyebrowse-switch-to-window-config-3
          "4" 'eyebrowse-switch-to-window-config-4
          "5" 'eyebrowse-switch-to-window-config-5
          "6" 'eyebrowse-switch-to-window-config-6
          "7" 'eyebrowse-switch-to-window-config-7
          "8" 'eyebrowse-switch-to-window-config-8
          "9" 'eyebrowse-switch-to-window-config-9
          "0" 'eyebrowse-switch-to-window-config-0
          "-" 'eyebrowse-prev-window-config
          "=" 'eyebrowse-next-window-config
          )
        )

      (use-package evil-surround
        :ensure t
        :config
        (global-evil-surround-mode))

      (use-package evil-collection
        :after evil
        :ensure t
        :config
        (evil-collection-init)
        (setq evil-collection-setup-minibuffer t)
        )
    #+END_SRC   
    
*** ranger
    #+BEGIN_SRC emacs-lisp
      ;; (use-package ranger
      ;;   :ensure t
      ;;   :config
      ;;   ;; (setq ranger-override-dired 'ranger)
      ;;   ;; (ranger-override-dired-mode t)
      ;;   (global-set-key (kbd "C-c r") #'ranger)
      ;;   (setq ranger-preview-file t)
      ;;   )
    #+END_SRC   
   
*** ace-window
    #+BEGIN_SRC emacs-lisp
      (use-package ace-window
        :ensure t
        :config
        (global-set-key (kbd "M-o") 'ace-window)
        (setq aw-dispatch-always t)
        (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
        )
    #+END_SRC
    
*** treemacs
    #+BEGIN_SRC emacs-lisp
      ;;(use-package treemacs
      ;;  :ensure t
      ;;  :defer t
      ;;  :config
      ;;  (progn
      ;;    (setq treemacs-width 25
      ;;          treemacs-show-hidden-files t
      ;;          )
      ;;    (treemacs-follow-mode t)
      ;;    (treemacs-filewatch-mode t)
      ;;    )
      ;;  (add-hook 'after-init-hook #'treemacs)
      ;;  :bind
      ;;  (:map global-map
      ;;        ("M-0"        . treemacs-select-window)
      ;;        ("C-c 1"      . treemacs-delete-other-windows)
      ;;        ("C-c t"     . treemacs)
      ;;        ("C-c g"     . treemacs-bookmark)
      ;;        ("C-c f"  . treemacs-find-file)
      ;;        )
      ;;  )

      ;;(use-package treemacs-evil
      ;;  :after treemacs
      ;;  :ensure t)

      ;;(use-package treemacs-projectile
      ;;  :after treemacs
      ;;  :ensure t)
    #+END_SRC
    
*** dumb-jump
    #+BEGIN_SRC emacs-lisp
      ;;(use-package dumb-jump
      ;;  :bind (("M-g o" . dumb-jump-go-other-window)
      ;;         ("M-g j" . dumb-jump-go)
      ;;         ("M-g i" . dumb-jump-go-prompt)
      ;;         ("M-g x" . dumb-jump-go-prefer-external)
      ;;         ("M-g z" . dumb-jump-go-prefer-external-other-window))
      ;;  :config (setq dumb-jump-selector 'helm)
      ;;  :ensure t
      ;;  )
    #+END_SRC
  
*** minimap
    #+BEGIN_SRC emacs-lisp
      ;;(use-package minimap
      ;;:ensure t
      ;;:config
      ;;(add-to-list 'minimap-major-modes 'org-mode)
      ;;(setq minimap-highlight-line nil)
      ;;(setq minimap-window-location 'right)
      ;;(setq minimap-recreate-window t)
      ;;(minimap-mode t)
      ;;)
    #+END_SRC
    
*** sublimity
    #+BEGIN_SRC emacs-lisp
      ;;(use-package sublimity
      ;;:ensure t
      ;;:config 
      ;;(require 'sublimity)
      ;;;;(require 'sublimity-scroll)
      ;;(require 'sublimity-map)
      ;;(sublimity-mode 1)
      ;;(sublimity-map-set-delay nil)
      ;;)
    #+END_SRC    
  
*** undo-tree
    #+BEGIN_SRC emacs-lisp
      ;;(use-package undo-tree
      ;;:ensure t
      ;;:config
      ;;(global-undo-tree-mode)
      ;;;; make ctrl-z undo
      ;;(global-set-key (kbd "C-z") 'undo)
      ;;;; make ctrl-Z redo
      ;;(defalias 'redo 'undo-tree-redo)
      ;;(global-set-key (kbd "C-S-z") 'redo)
      ;;)
    #+END_SRC
    
*** eyebrowse
    #+BEGIN_SRC emacs-lisp
      (use-package eyebrowse
        :ensure t
        :config
        (eyebrowse-mode t)
        )
    #+END_SRC
   
*** fzf
    #+BEGIN_SRC emacs-lisp
      (use-package fzf
        :ensure t
        :config
        (global-set-key (kbd "C-c z") 'fzf)
        (global-set-key (kbd "C-c x") 'fzf-directory)
        )
    #+END_SRC
    
*** avy
    #+BEGIN_SRC emacs-lisp
      (use-package avy
        :ensure t
        :config
        (global-set-key (kbd "C-;") 'avy-goto-char)
        (global-set-key (kbd "C-:") 'avy-goto-char-timer)
        (global-set-key (kbd "M-g f") 'avy-goto-line)
        (global-set-key (kbd "M-g e") 'avy-goto-word-0)
        )
    #+END_SRC

** Apparence
*** rainbow-mode
    #+BEGIN_SRC emacs-lisp
      (use-package rainbow-mode
        :ensure t
        :config
        (add-hook 'prog-mode-hook #'rainbow-mode)
        )
    #+END_SRC

*** base16-theme
    #+BEGIN_SRC emacs-lisp
      (use-package base16-theme
        :ensure t
        )          
    #+END_SRC

*** xresources-theme
    #+BEGIN_SRC emacs-lisp
      (use-package xresources-theme
        :ensure t
        :config
        ;;(let ((line (face-attribute 'mode-line :underline)))
        ;;(set-face-attribute 'mode-line          nil :overline   line)
        ;;(set-face-attribute 'mode-line-inactive nil :overline   line)
        ;;(set-face-attribute 'mode-line-inactive nil :underline  line)
        ;;(set-face-attribute 'mode-line          nil :box        nil)
        ;;(set-face-attribute 'mode-line-inactive nil :box        nil))
        )
      ;;      (set-face-attribute 'mode-line-inactive nil :background "#f9f2d9")))
    #+END_SRC
    
*** Chargement des thèmes
    #+BEGIN_SRC emacs-lisp
      ;;(load-theme 'base16-darktooth t)
      ;;(load-theme 'base16-default-dark t)
      ;;(load-theme 'base16-gruvbox-dark-hard t)
      ;;(load-theme 'base16-materia t)
      ;;(load-theme 'base16-nord t)
      ;;(load-theme 'base16-oceanicnext t)
      ;;(load-theme 'base16-onedark t)
      ;;(load-theme 'base16-phd t)

      (defun my-frame-tweaks (&optional frame)
        "My personal frame tweaks."
        (unless frame
          (setq frame (selected-frame)))
        (when frame
          (with-selected-frame frame
            (when (display-graphic-p)
              (load-theme 'xresources t)))))
      ;; For the case that the init file runs after the frame has been created.
      ;; Call of emacs without --daemon option.
      ;;(my-frame-tweaks) 
      ;; For the case that the init file runs before the frame is created.
      ;; Call of emacs with --daemon option.
      (add-hook 'after-make-frame-functions #'my-frame-tweaks t)    
    #+END_SRC

*** spaceline
    #+BEGIN_SRC emacs-lisp
      (use-package spaceline
        :ensure t
        :config
        (spaceline-spacemacs-theme)
        ;;(spaceline-emacs-theme)
        (setq powerline-default-separator 'wave)
        ;;(setq powerline-default-separator 'wave)
        ;; choix : alternate, arrow, arrow-fade, bar, box, brace,
        ;; butt, chamfer, contour, curve, rounded, roundstub, slant, wave, zigzag,
        ;; utf-8.
        (setq spaceline-workspace-numbers-unicode t)
        (setq spaceline-window-numbers-unicode t)
        ;;(spaceline-toggle-workspace-number-off)
        (spaceline-helm-mode +1)
        (spaceline-info-mode +1)
        (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
        (spaceline-compile)
        )

      (use-package all-the-icons
        :ensure t
        )

      (use-package spaceline-all-the-icons
        :ensure t
        :after spaceline
        :config (spaceline-all-the-icons-theme)
        (setq spaceline-all-the-icons-flycheck-alternate t)
        (setq spaceline-all-the-icons-separator-type 'slant)
        ;; slant arrow cup wave none
        ;;(setq spaceline-all-the-icons-separators-invert-direction t)
        (setq spaceline-all-the-icons-primary-separator "")
        (setq spaceline-all-the-icons-secondary-separator "")
        ;;(setq powerline-text-scale-factor 1.1)
        (spaceline-toggle-all-the-icons-buffer-position-on)
        (spaceline-toggle-all-the-icons-eyebrowse-workspace-off)
        (spaceline-toggle-all-the-icons-projectile-on)
        )
    #+END_SRC
    
*** telephone-line
    #+BEGIN_SRC emacs-lisp
      ;;(use-package telephone-line
      ;;  :ensure t
      ;;  :config
      ;;  (setq telephone-line-primary-left-separator 'telephone-line-cubed-left
      ;;        telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
      ;;        telephone-line-primary-right-separator 'telephone-line-cubed-right
      ;;        telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-right)
      ;;  (setq telephone-line-height 20)
      ;;  (telephone-line-mode 1))
    #+END_SRC
    
*** moody
    #+BEGIN_SRC emacs-lisp
      ;;(use-package moody
      ;;  :ensure t
      ;;  :config
      ;;  (setq x-underline-at-descent-line t)
      ;;  (moody-replace-mode-line-buffer-identification)
      ;;  (moody-replace-vc-mode))

      ;;(use-package minions
      ;;  :ensure t
      ;;  :config (minions-mode 1))
    #+END_SRC
   
*** doom-modeline 
    #+BEGIN_SRC emacs-lisp
      ;;(use-package doom-modeline
      ;;  :ensure t
      ;;  :defer t
      ;;  :hook (after-init . doom-modeline-init))
    #+END_SRC
    
*** page-break-lines
    #+BEGIN_SRC emacs-lisp
      (use-package page-break-lines
        :ensure t
        :config 
        ;;(turn-on-page-break-lines-mode)
        (global-page-break-lines-mode)
        )
    #+END_SRC
    
*** dashboard
    #+BEGIN_SRC emacs-lisp
      (use-package dashboard
        :ensure t
        :config (dashboard-setup-startup-hook)
        (setq dashboard-banner-logo-title "Bienvenue dans Emacs")
        (setq dashboard-items '((recents . 5)
                                (bookmarks . 5)
                                (projects . 5)
                                (agenda . 5)
                                (registers . 5)))
        )
    #+END_SRC

*** eshell-git-prompt
    #+BEGIN_SRC emacs-lisp
      (use-package eshell-git-prompt
        :ensure t
        :config
        (eshell-git-prompt-use-theme 'powerline)
        )

    #+END_SRC
** Recherche, complétion, Syntaxe, …
*** Helm
    #+BEGIN_SRC emacs-lisp
      (use-package helm
        :ensure t
        :config (helm-mode 1)
        (setq helm-mini-default-sources '(helm-source-buffers-list
                                          helm-source-recentf
                                          helm-source-bookmarks
                                          helm-source-buffer-not-found)
              ;;helm-always-two-windows t
              helm-split-window-inside-p t
              )
        (global-set-key (kbd "M-x") #'helm-M-x)
        (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
        (global-set-key (kbd "C-x C-f") #'helm-find-files)
        (global-set-key (kbd "C-x f") #'helm-recentf)
        (global-set-key (kbd "C-x C-b") #'helm-mini)
        (global-set-key (kbd "C-x b") #'helm-mini)
        )
    #+END_SRC

*** Yasnippet
    #+BEGIN_SRC emacs-lisp
      (use-package yasnippet
        :ensure t
        :config (yas-global-mode)
        )

      (use-package yasnippet-snippets
        :ensure t
        :after yasnippet
        :config (yasnippet-snippets-initialize)
        )
    #+END_SRC
    
*** Company-mode
    #+BEGIN_SRC emacs-lisp
      (use-package company
        :ensure t
        :config
        '(define-key company-active-map (kbd "C-c h") #'company-quickhelp-manual-begin)
        (setq company-begin-commands '(self-insert-command))
        (setq company-idle-delay 0)
        (setq company-minimum-prefix-length 2)
        (setq company-show-numbers t)
        (setq company-tooltip-align-annotations 't)
        (global-company-mode t)
        )

      (use-package company-quickhelp
        :ensure t
        :config
        (company-quickhelp-mode)
        )
    #+END_SRC
    
*** Company-box
    #+BEGIN_SRC emacs-lisp
      ;;rendering problem
      (use-package company-box
        :ensure t
        :after company
        :hook (company-mode . company-box-mode)
        )
    #+END_SRC

*** company-shell
    #+BEGIN_SRC emacs-lisp
      (use-package company-shell
        :ensure t
        :config
        (add-to-list 'company-backends '(company-shell company-shell-env company-fish-shell)
                     )
        )
    #+END_SRC

*** smartparens
    #+BEGIN_SRC emacs-lisp
      (use-package smartparens
        :ensure t
        :config
        (require 'smartparens-config)
        (smartparens-global-mode t)
        (show-smartparens-global-mode t)
        )
    #+END_SRC

*** Flycheck
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck
        :ensure t
        :config
        (add-hook 'after-init-hook 'global-flycheck-mode)
        )
    #+END_SRC
    
*** ggtags 
    #+BEGIN_SRC emacs-lisp
      (use-package ggtags
        :ensure t
        :config (add-hook 'prog-mode-hook 'ggtags-mode)
        )
    #+END_SRC
    
** Projets
*** Magit
    #+BEGIN_SRC emacs-lisp
      (use-package magit
        :ensure t
        :config
        (progn
          (bind-key "C-x g" 'magit-status)
          ;;(bind-key "C-c a " 'magit-blame)
          ))
    #+END_SRC
    
*** evil-magit
    #+BEGIN_SRC emacs-lisp
      (use-package evil-magit
        :ensure t
        )
    #+END_SRC
    
*** projectile
    #+BEGIN_SRC emacs-lisp
      (use-package projectile
        :ensure t
        :config (projectile-mode t)
        (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
        (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
        )
    #+END_SRC
    
*** helm-projectile
    #+BEGIN_SRC emacs-lisp
      (use-package helm-projectile
        :ensure t
        :config (helm-projectile-on)
        )
    #+END_SRC
   
** Org-mode
*** Org-mode
    #+BEGIN_SRC emacs-lisp
      (use-package org
        :ensure org-plus-contrib
        :config
        (setq org-agenda-files (list "~/Nextcloud/3. org/Listes/"
                                     "~/Nextcloud/3. org/Culture/"
                                     "~/Nextcloud/3. org/Informatique/"))
        (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
        (global-set-key (kbd "C-c l") 'org-store-link)
        (global-set-key (kbd "C-c a") 'org-agenda)
        (global-set-key (kbd "C-c b") 'org-iswitchb)
        (global-set-key (kbd "C-c v") 'org-show-todo-tree)
        (setq org-agenda-start-on-weekday nil)
        (setq org-replace-disputed-keys t)
        (setq org-src-fontify-natively t)
        (setq org-src-tab-acts-natively t)
        (setq org-log-done t)
        (setq org-confirm-babel-evaluate nil)
        (org-babel-do-load-languages
         'org-babel-load-languages
         '((python . t)
           (emacs-lisp . t)
           (R . t)
           (org . t)
           (latex . t)
           ))
        (setq org-startup-with-inline-images t)
        (setq org-image-actual-width (/ (display-pixel-width) 3))
        (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.8))
        (require 'ox-latex)
        (require 'ox-html)
        (require 'ox-beamer)
        (require 'ox-odt)
        )
    #+END_SRC
    
*** Evil-org
    #+BEGIN_SRC emacs-lisp
      (use-package evil-org
        :ensure t
        :after org
        :config
        (add-hook 'org-mode-hook 'evil-org-mode)
        (add-hook 'evil-org-mode-hook
                  (lambda ()
                    (evil-org-set-key-theme)))
        (require 'evil-org-agenda)
        (evil-org-agenda-set-keys))
    #+END_SRC
    
*** org-bullets
    #+BEGIN_SRC emacs-lisp
      (use-package org-bullets
        :ensure t
        :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
        (setq org-ellipsis "…")
        ;; ▼ ↴ ⬎ ⤷ ⋱ … ⤵ ▸
        (setq org-bullets-bullet-list '("○" "●" "◆" "◇" "▶" ))
        ) 
      ;; Choix
      ;; ◉ ○ ✸ ✿
      ;; ♥ ● ◇ ✚ ✜ ☯ ◆ ♠ ♣ ♦ ☢ ❀ ◆ ◖ ▶
      ;; ► • ★ ▸
    #+END_SRC
    
*** Exports
**** Twitter Bootstrap
     #+BEGIN_SRC emacs-lisp
       (use-package ox-twbs
         :ensure t
         )
     #+END_SRC
     
**** org-reveal
     #+BEGIN_SRC emacs-lisp
       (use-package ox-reveal
         :ensure t
         :config
         (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js@3.7.0/")
         (setq org-reveal-mathjax t)
         )

       (use-package htmlize
         :ensure t
         )
     #+END_SRC
     
*** org-capture
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-c c")
                      'org-capture)

      (setq org-capture-templates
            '(("a" "Album à écouter" entry (file+headline "~/Nextcloud/3. org/Culture/Musique.org" "Albums à écouter")
               "* %?\n%^g\n%T" :prepend t)
              ("t" "À faire" entry (file+headline "~/Nextcloud/3. org/Listes/TODO.org" "À Faire")
               "* %?\n%T\n" :prepend t)
              ("p" "Idée programmation" entry (file+headline "~/Nextcloud/3. org/Listes/Idées programmation.org" "Idées programmation")
               "* %?\n%T\n" :prepend t)
              ("s" "Série à regarder" entry (file+headline "~/Nextcloud/3. org/Culture/Séries.org" "Séries à regarder")
               "* %?\n%T\n" :prepend t)
              ("f" "Film à regarder" entry (file+headline "~/Nextcloud/3. org/Culture/Films.org" "Films à regarder")
               "* %?\n%T\n" :prepend t)
              ))
    #+END_SRC

*** ox-hugo
    #+BEGIN_SRC emacs-lisp
      (use-package ox-hugo
        :ensure t
        :after ox)
    #+END_SRC
    
*** org-noter
    #+BEGIN_SRC emacs-lisp
      (use-package org-noter
        :ensure t
        :config (setq org-noter-default-notes-file-names '("Notes.org")
                      org-noter-notes-search-path '("/~/Nextcloud/3. org/Notes/")
                      org-noter-separate-notes-from-heading t))
    #+END_SRC
    
** Programmation
*** ess
    #+BEGIN_SRC emacs-lisp
      (use-package ess
        :ensure t
        :config
        (setq ess-use-company t))
    #+END_SRC

*** org-prewview-html
    #+BEGIN_SRC emacs-lisp
      (use-package org-preview-html
        :ensure t
        :config 
        ;;(add-hook 'org-mode-hook 'org-preview-html-mode)
        (global-set-key (kbd "C-c p") #'org-preview-html-mode)
        )
    #+END_SRC
    
*** Python
**** elpy
     #+BEGIN_SRC emacs-lisp
       (use-package elpy
         :ensure t
         :config (elpy-enable)
         (setq python-shell-interpreter "jupyter"
               python-shell-interpreter-args "console --simple-prompt"
               python-shell-prompt-detect-failure-warning nil)
         (add-to-list 'python-shell-completion-native-disabled-interpreters
                      "jupyter")
         )
     #+END_SRC
    
** Documentation
*** helpful
    #+BEGIN_SRC emacs-lisp
      (use-package helpful
        :ensure t
        :config
        (global-set-key (kbd "C-h f") #'helpful-callable)

        (global-set-key (kbd "C-h v") #'helpful-variable)
        (global-set-key (kbd "C-h k") #'helpful-key)

        ;; Lookup the current symbol at point. C-c C-d is a common keybinding
        ;; for this in lisp modes.
        (global-set-key (kbd "C-c C-d") #'helpful-at-point)

        (global-set-key (kbd "C-h F") #'helpful-function)
        (global-set-key (kbd "C-h C") #'helpful-command)
        )
    #+END_SRC
    
*** which-key
    #+BEGIN_SRC emacs-lisp
      (use-package which-key
        :ensure t
        :config
        (which-key-mode)
        )
    #+END_SRC
    
** Système
*** pdf-tools
    #+BEGIN_SRC emacs-lisp
      (use-package pdf-tools
        :ensure t
        :config
        (pdf-tools-install)
        )
    #+END_SRC

*** symon
    #+BEGIN_SRC emacs-lisp
      (use-package symon
        :ensure t
        :config
        (setq symon-refresh-rate 4)
        (setq symon-sparkline-type 'boxed)
        (symon-mode)
        )
    #+END_SRC

** Programmes
*** eww
    #+BEGIN_SRC emacs-lisp
      (use-package eww
        :ensure t
        )

      (use-package ace-link
        :ensure t
        :config
        (ace-link-setup-default))
    #+END_SRC
    
*** simple-mpc
    #+BEGIN_SRC emacs-lisp
      (use-package simple-mpc
        :ensure t
        :config
        (add-to-list 'evil-emacs-state-modes 'simple-mpc-mode)
        )
    #+END_SRC
    
*** elfeed
    #+BEGIN_SRC emacs-lisp
      (use-package elfeed-org
        :ensure t
        :config
        (elfeed-org)
        (setq rmh-elfeed-org-files (list "~/Nextcloud/3. org/Listes/rss.org"))
        )

      (use-package elfeed
        :ensure t
        :config
        (global-set-key (kbd "C-x w") 'elfeed)
        ;;(setf url-queue-timeout 4)
        )

      ;;(use-package elfeed-goodies
      ;;  :ensure t
      ;;  :config
      ;;  (elfeed-goodies/setup)
      ;;  )
    #+END_SRC
  
*** notmuch
    #+BEGIN_SRC emacs-lisp
      (use-package notmuch
        :ensure t
        )
    #+END_SRC
    
* EXWM
  #+BEGIN_SRC emacs-lisp
    ;;(use-package exwm
    ;; :ensure t
    ;; :config
    ;; (require 'exwm)
    ;; (require 'exwm-config)
    ;; (exwm-config-default)
    ;; (require 'exwm-systemtray)
    ;; (exwm-systemtray-enable)
    ;; (display-time-mode 1)
    ;; (display-battery-mode 1)
    ;; (setq exwm-input-global-keys
    ;;       `(
    ;;         ;; Bind "s-r" to exit char-mode and fullscreen mode.
    ;;         ([?\s-r] . exwm-reset)
    ;;         ;; Bind "s-w" to switch workspace interactively.
    ;;         ([?\s-w] . exwm-workspace-switch)
    ;;         ;; Bind "s-0" to "s-9" to switch to a workspace by its index.
    ;;         ,@(mapcar (lambda (i)
    ;;                     `(,(kbd (format "s-%d" i)) .
    ;;                       (lambda ()
    ;;                         (interactive)
    ;;                         (exwm-workspace-switch-create ,i))))
    ;;                   (number-sequence 0 9))
    ;;         ;; Bind "s-&" to launch applications ('M-&' also works if the output
    ;;         ;; buffer does not bother you).
    ;;         ([?\s-&] . (lambda (command)
    ;;                      (interactive (list (read-shell-command "$ ")))
    ;;                      (start-process-shell-command command nil command)))
    ;;         ;; Bind "s-<f2>" to "slock", a simple X display locker.
    ;;         ([s-f2] . (lambda ()
    ;;                     (interactive)
    ;;                     (start-process-shell-command "" nil "slock")))
    ;;         ([XF86MonBrightnessDown] . (lambda ()
    ;;                                      (interactive)
    ;;                                      (start-process-shell-command "" nil "light -U 5%")))
    ;;         ([XF86MonBrightnessUp] . (lambda ()
    ;;                                    (interactive)
    ;;                                    (start-process-shell-command "" nil "light -A 5%")))
    ;;         ([Print] . (lambda ()
    ;;                      (interactive)
    ;;                      (start-process-shell-command "" nil "maim ~/Nextcloud/Images/Captures d'écran/$(date +%s).png")))
    ;;         ([Pause] . (lambda ()
    ;;                      (interactive)
    ;;                      (start-process-shell-command "" nil "wal -gi ~/Nextcloud/5. Fonds d'écran/wal")))
    ;;         ([XF86AudioRaiseVolume] . (lambda ()
    ;;                                     (interactive)
    ;;                                     (start-process-shell-command "" nil "amixer -q sset Master 1%+")))
    ;;         ([XF86AudioLowerVolume] . (lambda ()
    ;;                                     (interactive)
    ;;                                     (start-process-shell-command "" nil "amixer -q sset Master 1%-")))
    ;;         ([XF86AudioMute] . (lambda ()
    ;;                              (interactive)
    ;;                              (start-process-shell-command "" nil "amixer -q sset Master toggle")))
    ;;         ([XF86AudioPlay] . (lambda ()
    ;;                              (interactive)
    ;;                              (start-process-shell-command "" nil "mpc toggle")))
    ;;         ([XF86AudioPause] . (lambda ()
    ;;                               (interactive)
    ;;                               (start-process-shell-command "" nil "mpc toggle")))
    ;;         ([XF86AudioNext] . (lambda ()
    ;;                              (interactive)
    ;;                              (start-process-shell-command "" nil "mpc next")))
    ;;         ([XF86AudioPrev] . (lambda ()
    ;;                              (interactive)
    ;;                              (start-process-shell-command "" nil "mpc prev")))
    ;;         ([XF86TouchpadToggle] . (lambda ()
    ;;                                   (interactive)
    ;;                                   (start-process "" nil "~/scripts/touchpad_toggle.sh")))
    ;;         ([XF86Display] . (lambda ()
    ;;                            (interactive)
    ;;                            (start-process "" nil "~/scripts/display_config.sh")))
    ;;         ([XF86Launch1] . (lambda ()
    ;;                            (interactive)
    ;;                            (start-process "" nil "~/scripts/search.sh")))
    ;;         ([s-XF86Launch1] . (lambda ()
    ;;                              (interactive)
    ;;                              (start-process "" nil "~/scripts/launch.sh")))
    ;;         ([?\s-d] . (lambda ()
    ;;                     (interactive)
    ;;                     (start-process-shell-command "" nil "rofi -show run")))
    ;;         ([?\s-q] . (lambda ()
    ;;                     (interactive)
    ;;                     (start-process-shell-command "" nil "setxkbmap us -variant intl")))
    ;;         ([?\s-b] . (lambda ()
    ;;                     (interactive)
    ;;                     (start-process-shell-command "" nil "setxkbmap fr bepo")))
    ;;         )
    ;;       )
    ;; (shell-command "setxkbmap us -variant intl")
    ;; )
  #+END_SRC
  
* Autres
** Fonctions
*** elfeed-play-with-mpv
    #+BEGIN_SRC emacs-lisp
      (setq elfeed-db-directory (expand-file-name "elfeed" user-emacs-directory))

      (defun ambrevar/elfeed-play-with-mpv ()
        "Play entry link with mpv."
        (interactive)
        (let ((entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single)))
              (quality-arg "")
              (quality-val "720"))
          (setq quality-val (string-to-number quality-val))
          (message "Opening %s with height≤%s with mpv..." (elfeed-entry-link entry) quality-val)
          (when (< 0 quality-val)
            (setq quality-arg (format "--ytdl-format=[height<=?%s]" quality-val)))
          (start-process "elfeed-mpv" nil "mpv" quality-arg (elfeed-entry-link entry))))

      (defun ambrevar/elfeed-open-with-eww ()
        "Open in eww with `eww-readable'."
        (interactive)
        (let ((entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single))))
          (eww  (elfeed-entry-link entry))
          (add-hook 'eww-after-render-hook 'eww-readable nil t)))

      (defvar ambrevar/elfeed-visit-patterns
        '(("youtu\\.?be" . ambrevar/elfeed-play-with-mpv)
          ("phoronix" . ambrevar/elfeed-open-with-eww))
        "List of (regexps . function) to match against elfeed entry link to know whether how to visit the link.")

      (defun ambrevar/elfeed-visit-maybe-external ()
        "Visit with external function if entry link matches `ambrevar/elfeed-visit-patterns',
      visit otherwise."
        (interactive)
        (let ((entry (if (eq major-mode 'elfeed-show-mode)
                         elfeed-show-entry
                       (elfeed-search-selected :single)))
              (patterns ambrevar/elfeed-visit-patterns))
          (while (and patterns (not (string-match (caar patterns) (elfeed-entry-link entry))))
            (setq patterns (cdr patterns)))
          (cond
           (patterns
            (funcall (cdar patterns)))
           ((eq major-mode 'elfeed-search-mode)
            ;; (call-interactively 'elfeed-search-show-entry)
            (call-interactively 'elfeed-search-browse-url))
           (t (elfeed-show-visit)))))

      (evil-define-key 'normal elfeed-search-mode-map (kbd "<S-return>") #'ambrevar/elfeed-visit-maybe-external)
    #+END_SRC
    
** Personnalisation
   #+BEGIN_SRC emacs-lisp
     (custom-set-faces
      '(eshell-git-prompt-powerline-dir-face ((t (:background "gray18"))))
      '(helm-M-x-key ((t (:foreground "white" :underline t))))
      '(helm-match ((t (:foreground "white"))))
      '(hl-line ((t (:background "gray30"))))
      ;;'(minimap-active-region-background ((((background dark)) (:background "#2A2A2A222222")) (t (:background "#D3D3D3222222"))) nil :group)
      '(spaceline-evil-normal ((t (:background "dim grey" :foreground "black"))))
      '(spaceline-evil-insert ((t (:background "dark slate grey" :foreground "black"))))
      '(spaceline-evil-visual ((t (:background "indian red" :foreground "black"))))
      '(spaceline-evil-replace ((t (:background "dark gray" :foreground "black"))))
      )
   #+END_SRC
   
** Raccourcis clavier
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
     (global-set-key (kbd "S-C-<down>") 'shrink-window)
     (global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
     (global-set-key (kbd "S-C-<up>") 'enlarge-window)
     (global-set-key (kbd "S-C-h") 'shrink-window-horizontally)
     (global-set-key (kbd "S-C-j") 'shrink-window)
     (global-set-key (kbd "S-C-l") 'enlarge-window-horizontally)
     (global-set-key (kbd "S-C-k") 'enlarge-window)
   #+END_SRC
